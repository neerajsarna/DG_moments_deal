// in the following namespace we test the Equation Generator with the help of A matrix
namespace Test_EquationGenerator
{
	using namespace dealii;

	void develop_A1(Full_matrix &A1, const unsigned int nEqn)
	{
		A1.resize(nEqn,nEqn);
		Assert(nEqn == 6 || nEqn == 17, ExcNotImplemented());
	
		A1 << 0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,-0.816496580927726,
   1.1153550716504106,0.,-0.29885849072268456,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,1.0000000000000002,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.816496580927726,0.,0.,0.,
   0.,0.,1.2909944487358056,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.1153550716504104,0.,0.,0.,0.,
   0.,-0.705412485247119,0.,1.3151940828054605,0.,-0.12913050014337502,0.,0.,0.,0.,0.,0.,
   0.,1.,0.,0.,0.,0.,0.,-0.6324555320336759,0.,1.1820055001214398,0.,-0.4504031501695621,
   0.,0.,0.,0.,0.,-0.2988584907226845,0.,0.,0.,0.,0.,0.1890147057527968,0.,
   -0.05141522465133952,0.,1.0251567261449717,0.,0.,0.,0.,0.,0.,0.,0.,1.2909944487358056,
   -0.7054124852471191,0.,0.18901470575279683,0.,0.,0.,0.,0.,0.,-1.1547005383792517,
   1.3197059180737234,0.,-0.3536141349944276,0.,0.,0.,0.,0.,-0.6324555320336759,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,1.1832159566199234,0.,0.,0.,0.,0.,1.3151940828054602,0.,
   -0.051415224651339075,0.,0.,0.,0.,0.,0.,0.,-0.7030008078529184,0.,
   0.027482593587046356,0.,0.,0.,0.,0.,1.18200550012144,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   -0.6318085158195446,0.,0.,0.,0.,0.,-0.12913050014337518,0.,1.0251567261449723,0.,0.,
   0.,0.,0.,0.,0.,0.06902315567418182,0.,-0.5479693195687607,0.,0.,0.,0.,0.,
   -0.4504031501695618,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.24075061055117059,0.,0.,0.,0.,0.,0.,
   0.,0.,-1.1547005383792517,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   1.3197059180737232,0.,-0.7030008078529186,0.,0.0690231556741818,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,1.1832159566199234,0.,-0.6318085158195446,0.,0.2407506105511707,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.3536141349944276,0.,0.027482593587046578,0.,
   -0.5479693195687607,0.,0.,0.,0.,0.;

	}

	void develop_A2(Full_matrix &A2,const unsigned int nEqn)
	{
		A2.resize(nEqn,nEqn);
		
	
		A2 << 0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   		1.0000000000000002,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,-0.816496580927726,
   		-0.29885849072268456,0.,1.1153550716504106,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   		-0.816496580927726,0.,0.,0.,0.,0.,1.2909944487358056,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   		-0.2988584907226845,0.,0.,0.,0.,0.,0.18901470575279683,0.,1.0251567261449717,0.,
   		-0.05141522465133941,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,-0.6324555320336759,0.,
   		-0.45040315016956206,0.,1.18200550012144,0.,0.,0.,0.,0.,0.,0.,1.1153550716504106,0.,
   		0.,0.,0.,0.,-0.705412485247119,0.,-0.12913050014337496,0.,1.3151940828054611,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,-0.6324555320336759,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.1832159566199234,
   0.,0.,0.,0.,1.2909944487358056,0.18901470575279683,0.,-0.7054124852471191,0.,0.,0.,0.,
   0.,0.,-1.1547005383792517,-0.3536141349944276,0.,1.3197059180737234,0.,0.,0.,0.,0.,
   -0.45040315016956156,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.24075061055117042,0.,0.,0.,0.,0.,
   1.0251567261449719,0.,-0.12913050014337488,0.,0.,0.,0.,0.,0.,0.,-0.5479693195687606,
   0.,0.06902315567418173,0.,0.,0.,0.,0.,1.1820055001214402,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   -0.6318085158195447,0.,0.,0.,0.,0.,-0.05141522465133924,0.,1.3151940828054605,0.,0.,
   0.,0.,0.,0.,0.,0.02748259358704644,0.,-0.7030008078529185,0.,0.,0.,0.,0.,0.,0.,0.,
   -1.1547005383792517,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   -0.35361413499442756,0.,-0.5479693195687606,0.,0.02748259358704655,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,1.1832159566199234,0.,0.24075061055117064,0.,-0.6318085158195447,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.3197059180737234,0.,0.06902315567418177,0.,
   -0.7030008078529189,0.,0.,0.,0.;


	}

	void develop_B(Full_matrix &B,const unsigned int nEqn, const unsigned int nBC)
	{
		B.resize(nBC,nEqn);

		B << -0.00001,1.,0.,8.164965809277262e-6,-0.000014142135623730951,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.8862269254527579,0.,0.,0.15811388300841897,0.,
   -1.0497813183356477,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.7302967433402214,
   0.31622776601683794,0.,0.,0.8862269254527579,0.,0.,0.,0.,0.,0.6531972647421809,
   -0.8451542547285166,0.,0.,0.,0.,0.,-0.09428090415820634,-0.5715476066494082,0.,0.,0.,
   0.,0.8862269254527579,0.,0.,0.,0.08432740427115679,0.21821789023599236,0.,0.,0.,0.,0.,
   0.04714045207910316,0.08164965809277262,0.,-0.4082482904638631,0.,0.,0.,0.,
   0.8862269254527579,0.,-0.04216370213557839,0.,0.,0.2182178902359924,0.,0.,
   -0.1336306209562122,0.,0.,0.,0.,0.,-0.4648348401006841,0.,0.2805658588748473,0.,0.,0.,
   0.,0.8862269254527579,0.;
	}

	void develop_S_half(Full_matrix &S_half,const unsigned int nEqn)
	{
		S_half.resize(nEqn,nEqn);

		S_half  << 1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   				  0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,
   		0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.3660254037844386,0.,
   0.3660254037844386,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.4142135623730951,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.3660254037844386,0.,1.3660254037844386,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   1.8689147936150907,0.,0.7121499099253351,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   2.3436814002319806,0.,0.7121499099253349,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.7121499099253349,0.,2.343681400231981,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.7121499099253349,0.,1.868914793615091,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.3660254037844386,0.,
   0.3660254037844386,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.4142135623730951,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.3660254037844386,0.,1.3660254037844386;
	}

	void develop_S_half_inv(Full_matrix &S_half_inv,const unsigned int nEqn)
	{
		S_half_inv.resize(nEqn,nEqn);
		
		S_half_inv << 1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.7886751345948129,0.,
   -0.21132486540518713,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.7071067811865476,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.21132486540518713,0.,
   0.7886751345948129,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.6051359354609693,0.,-0.1838763160762623,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.4825517247434612,0.,-0.1838763160762623,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,-0.18387631607626226,0.,0.48255172474346125,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,-0.18387631607626226,0.,0.6051359354609696,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.7886751345948129,0.,-0.21132486540518713,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.7071067811865476,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   -0.21132486540518713,0.,0.7886751345948129;
	}


	void develop_P(Full_matrix &P,const unsigned int nEqn,const double tau)
	{
		P.resize(nEqn,nEqn);
		
		P << 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0. + 1./tau,0.,
   0. - 1.1102230246251565e-16/tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0. + 1.0000000000000002/tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0. - 1.1102230246251565e-16/tau,0.,0. + 1./tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0. + 1./tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0. + 1./tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0. + 0.9999999999999998/tau,0.,0. + 1.1102230246251565e-16/tau,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0. + 0.9999999999999998/tau,0.,
   0. + 1.1102230246251565e-16/tau,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0. - 5.551115123125783e-17/tau,0.,0. + 1.0000000000000002/tau,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0. - 5.551115123125783e-17/tau,0.,0. + 1.0000000000000002/tau,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0. + 1./tau,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0. + 1./tau,0.,0. - 1.1102230246251565e-16/tau,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0. + 1.0000000000000002/tau,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0. - 1.1102230246251565e-16/tau,0.,0. + 1./tau;
	}

	// develops the ID of odd variables
	void develop_odd_ID(MatrixUI &vector,const unsigned int nEqn)
	{
		vector.resize(6,1);

		vector << 1, 5, 7, 9, 11, 15;
	}

	TEST(DevelopingSystem,HandlingDevelopingSystems)
	{
		const unsigned int dim = 2;
		ASSERT_EQ(dim,2) << "3D not implemented" << std::endl;

		std::string folder_name = "../system_matrices/";
		Constants::Base_Constants constants(input_file);
		G26::G26<dim> G26(constants.constants,folder_name);

		Assert(constants.constants.tau<10.0,ExcNotImplemented());

		// no we will manually enter the matrices so as to compare with the read values
		// we will now input all the matrices manually so as to compare with the results
		Full_matrix A1;
		Full_matrix A2;
		Full_matrix B;
		Full_matrix S_half;
		Full_matrix S_half_inv;
		Full_matrix P;
		MatrixUI odd_ID;
		

		// develop A1
		develop_A1(A1,G26.constants.nEqn);
		develop_A2(A2,G26.constants.nEqn);
		develop_B(B,G26.constants.nEqn,G26.constants.nBC);
		develop_S_half(S_half,G26.constants.nEqn);
		develop_S_half_inv(S_half_inv,G26.constants.nEqn);
		develop_P(P,G26.constants.nEqn,G26.constants.tau);
		develop_odd_ID(odd_ID,G26.constants.nEqn);

		
		Compare_Float_Mat(G26.system_data.A[0].matrix,A1);
		Compare_Float_Mat(G26.system_data.A[1].matrix,A2);
		Compare_Float_Mat(G26.base_tensorinfo.S_half,S_half);
		Compare_Float_Mat(G26.base_tensorinfo.S_half_inv,S_half_inv);
		Compare_Float_Mat(G26.system_data.P.matrix,P);
		Compare_Float_Mat(G26.system_data.B.matrix,B);
	
		for (unsigned int i = 0 ; i < 2 ; i ++)
			EXPECT_EQ(odd_ID(i,0),G26.system_data.odd_ID(i,0));
	}
}