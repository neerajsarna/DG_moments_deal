	template<>
	void 
	Base_TensorInfo<2>
	::reinit_Invsymmetrizer(std::vector<projector_data> &tensor_Invsymmetrizer)
	{
		AssertDimension(tensor_Invsymmetrizer.size(),max_tensorial_degree + 1);

		for (unsigned int i = 0 ; i < max_tensorial_degree + 1 ; i++)
      {
         AssertDimension(tensor_Invsymmetrizer[i].P.rows(),components(i));
         AssertDimension(tensor_Invsymmetrizer[i].P.cols(),components(i));
      }
		
      for (unsigned int i = 0 ; i <= max_tensorial_degree; i++)
         tensor_Invsymmetrizer[i].P = tensor_symmetrizer[i].P.inverse();

		// tensor_Invsymmetrizer[0].P << 1.0;

		// tensor_Invsymmetrizer[1].P << 1.0, 0.0 ,0.0 ,1.0;	

		// tensor_Invsymmetrizer[2].P << 0.7886751345948129,0.,-0.21132486540518713,0.,0.7071067811865476,0.,
  //  									-0.21132486540518713,0.,0.7886751345948129;

		
		// tensor_Invsymmetrizer[3].P << 0.6051359354609693,0.,-0.18387631607626226,0.,0.,0.4825517247434612,0.,
  //  									-0.18387631607626226,-0.18387631607626226,0.,0.4825517247434612,0.,0.,
  //  									-0.18387631607626226,0.,0.6051359354609693;


  //  		tensor_Invsymmetrizer[4].P << 0.451650062404136,0,-0.13839827895350992,0,0.07368558939490877,0,
  //  									  0.3444911182523068,0,-0.15550888174769317,0,-0.13839827895350992,0,
  //  									  0.3004384484995911,0,-0.13839827895350992,0,-0.15550888174769317,0,
  //  									 0.3444911182523068,0,0.07368558939490877,0,-0.13839827895350992,0,0.451650062404136;


  //  		tensor_Invsymmetrizer[5].P <<0.3348780105982805,0,-0.1050471690880714,0,0.061692278839795806,0,0,
  //  									0.24400303613732024,0,-0.11334485995314773,0,0.06169227883979583,-0.1050471690880714,
  //  									0,0.20297142672836627,0,-0.11334485995314775,0,0,-0.11334485995314772,0,
  //  									0.20297142672836627,0,-0.10504716908807137,0.06169227883979578,0,
  //  									-0.11334485995314775,0,0.24400303613732022,0,0,0.06169227883979578,0,
  //  									-0.10504716908807137,0,0.33487801059828043;


  //  		tensor_Invsymmetrizer[6].P << 0.2456328243793865,0,-0.07724123286021514,0,0.04559604790757517,0,
		// 						   -0.02972166235120223,0,0.17495656234971213,0,-0.08428674905675924,0,
  //  									0.05186507137037941,0,-0.07724123286021517,0,0.13785782981863542,0,
  //  								   -0.08017259255365108,0,0.04559604790757518,0,-0.08428674905675922,0,
  //  									0.13270143060671033,0,-0.08428674905675922,0,0.04559604790757518,0,
  //  								   -0.08017259255365108,0,0.13785782981863542,0,-0.07724123286021517,0,
  //  									0.05186507137037941,0,-0.08428674905675924,0,0.17495656234971213,0,
  //  									-0.02972166235120223,0,0.04559604790757517,0,-0.07724123286021514,0,
  //  									0.2456328243793865;

  //  		tensor_Invsymmetrizer[7].P << 0.17964811460383617,0,-0.05703464805806691,0,0.03433497512904075,0,
  //  									 -0.02430536194144888,0,0,0.12480471706697133,0,-0.060853004843338956,0,
  //  									  0.03797321545887675,0,-0.02430536194144907,-0.057034648058067364,0,
  //  										0.09603006250713847,0,-0.0583037583651218,0,0.03797321545887657,0,0,
  //  										-0.06085300484333908,0,0.08776507864146331,0,-0.05830375836512163,0,
  //  										0.034334975129040116,0.034334975129040164,0,-0.05830375836512146,0,
  //  									0.08776507864146352,0,-0.06085300484333898,0,0,0.0379732154588767,0,
  //  									-0.05830375836512154,0,0.09603006250713869,0,-0.05703464805806732,
  //  									-0.02430536194144913,0,0.03797321545887658,0,-0.06085300484333914,0,
  //  									0.12480471706697123,0,0,-0.024305361941449118,0,0.0343349751290401,0,
  //  									-0.05703464805806737,0,0.17964811460383612;


  //        tensor_Invsymmetrizer[8].P << 0.13062476660191502,0.,-0.0415045215940473,0.,0.025026230300928154,0.,
  //  -0.017786894196587882,0.,0.012770243554007632,0.,0.08949622721003458,0.,
  //  -0.04435720775658688,0.,0.028419935617536616,0.,-0.02009930057278414,0.,
  //  -0.041504521594047314,0.,0.06685899409455032,0.,-0.041297166767705146,0.,
  //  0.027463229535559998,0.,-0.01778689419658789,0.,-0.04435720775658688,0.,
  //  0.06007884330663202,0.,-0.04171913340038777,0.,0.028419935617536616,0.,
  //  0.02502623030092816,0.,-0.041297166767705146,0.,0.05682052023590071,0.,
  //  -0.041297166767705146,0.,0.02502623030092816,0.,0.028419935617536616,0.,
  //  -0.04171913340038777,0.,0.06007884330663202,0.,-0.04435720775658688,0.,
  //  -0.01778689419658789,0.,0.027463229535559998,0.,-0.041297166767705146,0.,
  //  0.06685899409455032,0.,-0.041504521594047314,0.,-0.02009930057278414,0.,
  //  0.028419935617536616,0.,-0.04435720775658688,0.,0.08949622721003458,0.,
  //  0.012770243554007632,0.,-0.017786894196587882,0.,0.025026230300928154,0.,
  //  -0.0415045215940473,0.,0.13062476660191502;

  //        tensor_Invsymmetrizer[9].P << 0.09482482833013428,0.,-0.03028168847947671,0.,0.01841254894404988,0.,
  //  -0.013313984689347032,0.,0.010277789296866149,0.,0.,0.06394458012377961,0.,
  //  -0.03190045351549243,0.,0.020564362655648497,0.,-0.014672578695341037,0.,
  //  0.010277789296862457,-0.030281688479486417,0.,0.04709200819011504,0.,
  //  -0.029663475603892424,0.,0.020343992915864625,0.,-0.014672578695343922,0.,0.,
  //  -0.03190045351549482,0.,0.041186385250585426,0.,-0.02911378598687329,0.,
  //  0.020343992915870947,0.,-0.013313984689363356,0.018412548944029168,0.,
  //  -0.02966347560388037,0.,0.03833193214915297,0.,-0.02911378598686653,0.,
  //  0.020564362655646977,0.,0.,0.020564362655646113,0.,-0.02911378598687021,0.,
  //  0.03833193214914822,0.,-0.029663475603882473,0.,0.018412548944028988,
  //  -0.01331398468936345,0.,0.02034399291586975,0.,-0.029113785986876008,0.,
  //  0.04118638525058331,0.,-0.031900453515495315,0.,0.,-0.014672578695342449,0.,
  //  0.02034399291587091,0.,-0.029663475603884323,0.,0.04709200819011865,0.,
  //  -0.030281688479486108,0.010277789296862468,0.,-0.014672578695340688,0.,
  //  0.02056436265564933,0.,-0.03190045351549177,0.,0.06394458012377975,0.,0.,
  //  0.010277789296862471,0.,-0.013313984689362662,0.,0.0184125489440297,0.,
  //  -0.0302816884794857,0.,0.09482482833013348;


  //     tensor_Invsymmetrizer[10].P << 0.06858321306946291,0.,-0.021906073848707484,0.,0.013327489006232287,0.,
  //  -0.00965065129124288,0.,0.007475601665892876,0.,-0.005680698082829096,0.,
  //  0.045815327289311134,0.,-0.023069780023189216,0.,0.015049918785156517,0.,
  //  -0.010973668140517036,0.,0.00837642114315151,0.,-0.021906073848707484,0.,
  //  0.033114676369908766,0.,-0.021056424868948428,0.,0.014581032661984737,0.,
  //  -0.01064914156953849,0.,0.007475601665892876,0.,-0.02306978002318922,0.,
  //  0.02869907849726159,0.,-0.020682432543871403,0.,0.014948391454668326,0.,
  //  -0.010973668140517038,0.,0.013327489006232285,0.,-0.021056424868948424,0.,
  //  0.025945711478529913,0.,-0.02005001569933071,0.,0.014581032661984735,0.,
  //  -0.00965065129124288,0.,0.015049918785156517,0.,-0.0206824325438714,0.,
  //  0.025616935218677767,0.,-0.0206824325438714,0.,0.015049918785156517,0.,
  //  -0.00965065129124288,0.,0.014581032661984735,0.,-0.02005001569933071,0.,
  //  0.025945711478529913,0.,-0.021056424868948424,0.,0.013327489006232285,0.,
  //  -0.010973668140517038,0.,0.014948391454668326,0.,-0.020682432543871403,0.,
  //  0.02869907849726159,0.,-0.02306978002318922,0.,0.007475601665892876,0.,
  //  -0.01064914156953849,0.,0.014581032661984737,0.,-0.021056424868948428,0.,
  //  0.033114676369908766,0.,-0.021906073848707484,0.,0.00837642114315151,0.,
  //  -0.010973668140517036,0.,0.015049918785156517,0.,-0.023069780023189216,0.,
  //  0.045815327289311134,0.,-0.005680698082829096,0.,0.007475601665892876,0.,
  //  -0.00965065129124288,0.,0.013327489006232287,0.,-0.021906073848707484,0.,
  //  0.06858321306946291;

  //  tensor_Invsymmetrizer[11].P << 0.049552453529135204,0.,-0.015875491902776213,0.,0.009702708851220631,0.,
  //  -0.007079369940620802,0.,0.005570153511397785,0.,-0.0045190733412074635,0.,0.,
  //  0.032737958311414836,0.,-0.016551475450677672,0.,0.010834196599801543,0.,
  //  -0.00793099365473604,0.,0.006093275716493956,0.,-0.00451907334039443,
  //  -0.015875491900196582,0.,0.023436952133632352,0.,-0.015070877217550304,0.,
  //  0.010587366109057939,0.,-0.00792328062510849,0.,0.0060932757171217045,0.,0.,
  //  -0.016551475450100966,0.,0.019977682443952344,0.,-0.014529988699303685,0.,
  //  0.010625877707097385,0.,-0.00792328062732168,0.,0.005570153516584082,
  //  0.009702708859387753,0.,-0.015070877222163763,0.,0.017914023808503536,0.,
  //  -0.014097426667856683,0.,0.010625877704824253,0.,-0.007930993654196706,0.,0.,
  //  0.010834196600759316,0.,-0.01452998870037571,0.,0.01718905395296464,0.,
  //  -0.014097426665058558,0.,0.010587366104178573,0.,-0.00707936993041651,
  //  -0.0070793699303694484,0.,0.010587366104948884,0.,-0.014097426662531894,0.,
  //  0.017189053956109306,0.,-0.014529988698780187,0.,0.010834196601014947,0.,0.,
  //  -0.007930993653888104,0.,0.01062587770675132,0.,-0.014097426664057016,0.,
  //  0.01791402381155769,0.,-0.015070877221232236,0.,0.009702708859444702,
  //  0.0055701535165426745,0.,-0.007923280627999935,0.,0.010625877704871431,0.,
  //  -0.014529988702075485,0.,0.019977682442545275,0.,-0.016551475450326543,0.,0.,
  //  0.006093275716703987,0.,-0.007923280627718065,0.,0.010587366103910707,0.,
  //  -0.015070877221689045,0.,0.023436952132369543,0.,-0.015875491900273826,
  //  -0.00451907334035577,0.,0.006093275717127894,0.,-0.00793099365265382,0.,
  //  0.01083419660239629,0.,-0.016551475449359473,0.,0.032737958311626354,0.,0.,
  //  -0.004519073340355773,0.,0.005570153516720853,0.,-0.007079369930117494,0.,
  //  0.009702708859669014,0.,-0.015875491900197432,0.,0.04955245352929302;

	}

   template<>
   void 
   Base_TensorInfo<3>
   ::reinit_Invsymmetrizer(std::vector<projector_data> &tensor_Invsymmetrizer)
   {


      AssertDimension(tensor_Invsymmetrizer.size(),max_tensorial_degree + 1);

      for (unsigned int i = 0 ; i < max_tensorial_degree + 1 ; i++)
      {
         AssertDimension(tensor_Invsymmetrizer[i].P.rows(),components(i));
         AssertDimension(tensor_Invsymmetrizer[i].P.cols(),components(i));
      }
      
      for (unsigned int i = 0 ; i <= max_tensorial_degree; i++)
         tensor_Invsymmetrizer[i].P = tensor_symmetrizer[i].P.inverse();

   }